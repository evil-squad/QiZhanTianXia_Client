syntax = "proto3";

import "errpb/err.proto";

package roompb;

service Room {
	//// 注册 Online
	//rpc Register(RegisterReq) returns (RegisterResp) {}
	//// 注销 Online
	//rpc Unregister(UnregisterReq) returns (UnregisterResp) {}
	//// Keepalive 保活(3秒保活一次, 10秒超时)
	//rpc Keepalive(KeepaliveReq) returns (KeepaliveResp) {}
	// CreateRoom 创建房间
	rpc CreateRoom(CreateRoomReq) returns (CreateRoomResp) {}
	// DismissRoom 解散房间
	rpc DismissRoom(DismissRoomReq) returns (DismissRoomResp) {}
	// EnterRoom 玩家进入房间
	rpc EnterRoom(EnterRoomReq) returns (EnterRoomResp) {}
	// LeaveRoom 玩家离开房间
	rpc LeaveRoom(LeaveRoomReq) returns (LeaveRoomResp) {}
	// 查询uid信息
	rpc GetPlayerInfo(GetPlayerInfoReq) returns (GetPlayerInfoResp) {}
	// 获得房间服务器的负载信息(用于各个online做负载均衡)
	rpc GetLoadInfo(GetLoadInfoReq) returns (GetLoadInfoResp) {}
	// 申请解散房间
	rpc AskDismissRoom(AskDismissRoomReq) returns (AskDismissRoomResp) {}
	// 应答解散房间
	rpc ReplyDismissRoom(ReplyDismissRoomReq) returns (ReplyDismissRoomResp) {}
	// 玩家点开始按钮, 表示准备好开局
	rpc ReadyForStart(ReadyForStartReq) returns (ReadyForStartResp) {}
	// 下注
	rpc Bet(BetReq) returns (BetResp) {}
	// 要牌
	rpc Hit(HitReq) returns (HitResp) {}
	// 请求停牌
	rpc Stand(StandReq) returns (StandResp) {}
	// 请求牌局数据
	rpc GetGameData(GetGameDataReq) returns (GetGameDataResp) {}
}

message GetLoadInfoReq {
	int32 online_id = 1;
}
message GetLoadInfoResp {
	int64 player_num = 1;
	int64 room_num = 2;
	int64 inroom_player_num = 3;
}

message CreateRoomReq {
	string roomid = 1;
	int32 owner = 2;
}
message CreateRoomResp {
	// 错误码
	errpb.ERR errcode = 1;
}

message EnterRoomReq {
	int32 OnlineId = 1;
	string roomid = 2;
	string notiSubj = 3;
	// true: 观察者(房主不能是观察者, 硬塞会失败)
	bool ob = 4;
	// 加入者玩家信息
	int32 uid = 5;
	string nick = 6;
	bytes icon = 7;
	string ip = 8;
}
message EnterRoomResp {
	// 错误码
	errpb.ERR errcode = 1;
	// 座位情况
	repeated PlayerInfo players = 3;
	// 游戏信息
	GameInfo game_info = 4;
}

enum LEAVE_REASON {
	// 客户端连接断开(杀APP/断网)
	CLIENT_CONN_BROKEN = 0;
	// 房间解散(这个原因只会由roomsrv发起, online不会传过来)
	ROOM_DISMISS = 1;
	// 玩家在房间开始牌局之前点了离开房间
	PLAYER_WANT = 2;
	// 房间服务器出于逻辑需要不要保留座位
	ROOM_NEED_NORES = 3;
}

message LeaveRoomReq {
	// 房间号
	string roomid = 1;
	// 离开者id
	int32 uid = 2;
	// 离开的原因
	LEAVE_REASON reason = 3;
}
message LeaveRoomResp {
	// 错误码
	errpb.ERR errcode = 1;
	// 要不要保留玩家的房间
	bool reserve = 2;
}

message DismissRoomReq {
	// 解散的房间号(房间号和uid二选一, uid优先)
	string roomid = 1;
	// 解散者
	int32 uid = 2;
	// 强行关闭
	bool force = 3;
}
message DismissRoomResp {
	// 错误码
	errpb.ERR errcode = 1;
}

message GetPlayerInfoReq {
	repeated int32 uid = 1;
}
message GetPlayerInfoResp {
	// 错误码
	errpb.ERR errcode = 1;
	repeated PlayerInfo player_info = 3;
}

message AskDismissRoomReq {
	string roomid = 1;
	int32 uid = 2;
}
message AskDismissRoomResp {
	errpb.ERR errcode = 1;
	// 等待回复的剩余时间, 时间到还没有决议就强行解散房间;
	int32 wait_seconds = 2;
}

message ReplyDismissRoomReq {
	string roomid = 1;
	int32 uid = 2;
	bool agree = 3;
}
message ReplyDismissRoomResp {
	errpb.ERR errcode = 1;
}

// 已准备
message ReadyForStartReq {
	string roomid = 1;
	int32 uid = 2;
}
message ReadyForStartResp {
	errpb.ERR errcode = 1;
}

// 下注
message BetReq {
	string roomid = 1;
	int32 uid = 2;
	int32 bet = 3;
}
message BetResp {
	errpb.ERR errcode = 1;
}

// 要牌
message HitReq {
	string roomid = 1;
	int32 uid = 2;
}
message HitResp {
	errpb.ERR errcode = 1;
	// 新拿到的手牌
	Card card = 2;
}

// 停牌
message StandReq {
	string roomid = 1;
	int32 uid = 2;
}
message StandResp {
	errpb.ERR errcode = 1;
}

// 获得游戏数据
message GetGameDataReq {
	string roomid = 1;
	int32 uid = 2;
}
message GetGameDataResp {
	errpb.ERR errcode = 1;
	// 第几局
	int32 round_id = 2;
	// 本局状态
	RoundState state = 3;
	// 倒计时多少秒 (暂时没填)
	int32 countdown_seconds = 4;
	// uid的手牌(如果uid参加了本局比赛的话, 否则就是空)
	HandInfo hand = 5;
	// 当前局的玩家的第一张(翻开的)手牌
	repeated HandInfo cur_round_hands = 6;
}

// 通知源 或 通知接受者的类型
enum NOTIFIER {
	// 玩家
	PLAYER = 0;
	// 房间
	ROOM = 1;
	// online服务器
	ONLINE = 2;
}
enum NOTIFY {
	NOOP = 0;
	// 房间关闭
	ROOM_CLOSED = 1;
	// 玩家进入房间
	PLAYER_ENTER = 2;
	// 玩家离开房间
	PLAYER_LEAVE = 3;
	// 有人提出解散房间
	ASK_DISMISS_ROOM = 4;
	// 应答解散提议的通知
	REPLY_DISMISS_ROOM = 5;
	// 解散房间失败
	FAIL_DISMISS_ROOM = 6;

	// 玩家已准备(报名)
	PLAYER_READY = 7;
	// 游戏开始(意味着要扣房卡)
	ROOM_START = 8;
	// 切换到下一局
	GO_NEXT_ROUND = 9;
	// 一局开始, 开始倒计时, 接受其他参加者发起PLAYER_READY(报名)
	ROUND_START = 10;
	// 报名结束(倒计时结束或全部房间中的玩家已报名), 开始下注倒计时
	BETTING_START = 11;
	// 玩家下注
	PLAYER_BET = 12;
	// 下注结束, 开始要牌
	PLAYING_START = 13;
	// 更新当前可下注玩家
	UPDATE_CUR_BETTING_UID = 14;
	// 更新当前可要牌玩家
	UPDATE_CUR_PLAYING_UID = 15;
	// 玩家获得一张可见牌
	PLAYER_HIT= 16;
	// 玩家已经停牌
	PLAYER_STAND = 17;
	// 当所有人都停牌或倒计时结束, 一局结束(通知胜负和分数结算)
	ROUND_FINISH = 18;
	// 房卡用完, 最终结束(游戏过程被存储, 房间会被回收)
	GAME_FINISH = 19;
}
enum ROOM_CLOSE_REASON {
	// 房间空闲超时(指:没有玩家, 但可能还有ob)
	EMPTY = 0;
	// 被某玩家解散
	DISMISS = 1;
	// room服务器关闭
	ROOMSRV_CLOSE = 2;
}
message Notify {
	// 通知类型, 参考 NOTIFY 的定义
	NOTIFY type = 1;
	// 通知接收者, 具体指:
	// 解散通知: 不包括解散者自己, 包括ob
	// 进入通知: 房间所有人(不包括进入者自己)
	// 离开通知: 房间所有人(不包括退出者自己)
	int32 recver = 3;
	repeated int32 recvers = 4;
	RoomCloseNotify room_close = 5;
	PlayerEnterNotify player_enter = 6;
	PlayerLeaveNotify player_leave = 7;
	AskDismissNotify ask_dismiss = 8;
	ReplyDismissNotify reply_dismiss = 9;
	FailDismissNotify fail_dismiss = 10;

	PlayerReadyNotify player_ready = 11;
	RoomStartNotify room_start = 12;
	GoNextRoundNotify go_next_round = 13;
	RoundStartNotify round_start = 14;
	BettingStartNotify betting_start = 15;
	PlayerBetNotify player_bet = 16;
	PlayingStartNotify playing_start = 17;
	UpdateCurBettingUid update_cur_betting_uid = 18;
	UpdateCurPlayingUid update_cur_playing_uid = 19;
	PlayerHitNotify player_hit = 20;
	PlayerStandNotify player_stand = 21;
	RoundFinishNotify round_finish = 22;
	GameFinishNotify game_finish = 23;
}
// NOTIFY_PLAYER_READY
message PlayerReadyNotify {
	// 已准备的玩家uid
	int32 uid = 1;
}
// NOTIFY_ROOM_START
message RoomStartNotify {
	string roomid = 1;
	// 房主(用于扣卡)
	int32 owner = 2;
}
// NOTIFY_GO_NEXT_ROUND
message GoNextRoundNotify {
	string roomid = 1;
	// 切换到第几局(0,1,...)
	int32 round_id = 2;
}
// NOTIFY_ROUND_START
message RoundStartNotify {
	// 第几局
	int32 round_id = 1;
	// 倒计时多少秒
	int32 countdown_seconds = 2;
	// 庄家 uid
	int32 banker = 3;
}
// NOTIFY_BETTING_START
message BettingStartNotify {
	// 第几局
	int32 round_id = 1;
	// 倒计时多少秒
	int32 countdown_seconds = 2;
}
// NOTIFY_PLAYER_BET
message PlayerBetNotify {
	// 下注者uid
	int32 uid = 1;
	// 本次下注数
	int32 bet = 2;
	// 总下注数
	int32 total_bet = 3;
}
// NOTIFY_PLAYING_START
message PlayingStartNotify {
	// 第几局
	int32 round_id = 1;
	// 倒计时多少秒
	int32 countdown_seconds = 2;
	// 每个人的下注情况(包括强制下注)
	repeated BetInfo bets = 3;
	// 每个人自己的手牌信息
	HandInfo hands = 4;
}
// NOTIFY_UPDATE_CUR_BETTING_UID
message UpdateCurBettingUid {
	// 当前可以下注的uid
	int32 uid = 1;
}
// NOTIFY_UPDATE_CUR_PLAYING_UID
message UpdateCurPlayingUid {
	// 当前可以要牌的uid
	int32 uid = 1;
}
// NOTIFY_PLAYER_HIT
message PlayerHitNotify {
	// 停牌者uid
	int32 uid = 1;
	// 刚拿到的可见牌
	Card card = 2;
}
// NOTIFY_PLAYER_STAND
message PlayerStandNotify {
	// 停牌者uid
	int32 uid = 1;
	// true 因为爆牌而停牌
	bool burst = 2;
	// 底牌(如果是爆牌, 就会把底牌公布)
	Card hidden_card = 3;
}
// NOTIFY_ROUND_FINISH
message RoundFinishNotify {
	// 第几局
	int32 round_id = 1;
	// 最大牌型的uid
	int32 max_cat_uid = 2;
	// 每个人的结算
	repeated RoundSettlement settlements = 3;
}
// 一局的结算
message RoundSettlement {
	// 结算者uid
	int32 uid = 1;
	// 牌型
	HandCat handcat = 2;
	// 手牌
	repeated Card cards = 3;
	// 本局得分(负分表示扣钱, 正分表示挣钱)
	int32 score = 4;
}
// NOTIFY_GAME_FINISH
message GameFinishNotify {
	string roomid = 1;
	// 10局的结算
	repeated GameSettlement settlements = 2;
}
message GameSettlement {
	int32 uid = 1;
	string nick = 2;
	bytes icon = 3;
	string ip = 4;
	int32 attend_times = 5;
	int32 banker_times = 6;
	int32 win_times = 7;
	int32 lost_times = 8;
	int32 total_bet = 9;
	int32 total_win_score = 10;
	int32 total_lost_score = 11;
	int32 final_score = 14;
}
// NOTIFY_ROOM_CLOSED
message RoomCloseNotify {
	string roomid = 1;
	ROOM_CLOSE_REASON reason = 2;
	int32 dismisser = 3;
}
// NOTIFY_PLAYER_ENTER
message PlayerEnterNotify {
	// 进入者
	PlayerInfo enterer = 1;
}
// NOTIFY_PLAYER_LEAVE
message PlayerLeaveNotify {
	message Leaver {
		int32 uid = 1;
		// true: 保留 uid 的房间座位(显示成离线)
		bool reserve = 2;
		// true: ob, false: player
		bool ob = 3;
		// ob: obid, player: seatid
		int32 idx = 4;
	}
	// 离开者
	Leaver leaver = 1;
}
// NOTIFY_ASK_DISMISS_ROOM
message AskDismissNotify {
	// 发起解散者
	int32 dismisser = 1;
	// 等待解散的秒数, 超时没决议, 服务器强行解散房间
	int32 wait_seconds = 2;
}
// NOTIFY_REPLY_DISMISS_ROOM
message ReplyDismissNotify {
	// 应答者
	int32 replier = 1;
	// true: 同意解散, false: 不同意
	bool agree = 2;
}
// NOTIFY_FAIL_DISMISS_ROOM
message FailDismissNotify {
	string roomid = 1;
	// 不能解散的原因: 0多数不同意
	int32 reason = 2;
}

message PlayerInfo {
	int32 online_id = 1;
	int32 uid = 2;
	string nick = 3;
	int32 seatid = 5;
	bytes icon = 8;
	string ip = 9;
	bool in_room = 10;
}

// game define

message GameInfo {
	// 牌局开始没有
	bool started = 1;
	// true: 表示这个房间已经固化, 数据不会再变化
	bool finished = 2;
	// 当前局信息
	GameRound round = 3;
}

message GameRound {
	// 第几局(0,1,2,...)
	int32 id = 1;
	// 这局到状态
	RoundState state = 2;
	// 庄家uid
	int32 Banker = 3;
	// 所有这局到参加玩家uid列表
	repeated int32 uids = 4;
	// >0:当前下注玩家
	int32 cur_betting_uid = 5;
	// >0:当前要牌玩家
	int32 cur_playing_uid = 6;

	// >0:剩余报名秒数
	int32 wait_ready_sec = 7;
	// >0:剩余下注秒数
	int32 wait_betting_sec = 8;
	// >0:剩余要牌秒数
	int32 wait_playing_sec = 9;

	// 手牌
	repeated RoundHand hands = 10;
}

message RoundHand {
	int32 uid = 1;
	Card first_card = 2;
	int32 bet = 3;
	bool stand = 4;
	// 如果是进入者自己, 就有下面的字段
	repeated Card cards = 5;
}

enum HandCat {
	// 初始状态 (目前没有用到)
	Init = 0;
	// 爆牌: 点数相加>10点半(value>21)
	Burst = 1;
	// 平牌: 没有爆牌, 且以上什么都不是
	Flat = 2;
	// 十点半: <5张, 且点数相加=10点半(Value=21)
	TenHalf = 3;
	// 五小: 5张未爆, 且有点牌
	FiveXiao = 4;
	// 人五小: 5张未爆，且所有牌都是J,Q,K,小王,大王中的牌
	RFiveXiao = 5;
	// 天王: 5张未爆，且点数正好10点半
	TianWang = 6;
	// 6小: 6张未爆
	SixXiao = 7;
	// 7小: 7张未爆
	SevenXiao = 8;
	// 8小: 8张未爆
	EightXiao = 9;
	// 9小: 9张未爆
	NineXiao = 10;
	// 大天王: 九张未爆，并且点数正好10点半;
	DaTianWang = 11;
}

enum RoundState {
	// 本局刚初始化, 接受报名
	Inited = 0;
	// 本局刚开始, 报名计时开始, 接受报名
	Start = 1;
	// 本局开始下注
	Betting = 2;
	// 本局开始玩牌(要牌/停牌)
	Playing = 3;
	// 本局完成(玩牌计时结束/全部停牌)
	Finish = 4;
}

// 下注信息
message BetInfo {
	int32 uid = 1;
	int32 bet = 2;
}

// 牌的花色点数
message Card {
	// CardID
	int32 ID = 1;
	// 花色
	string kind = 2;
	// 点数 "A,2,..,O,J,K,.."
	string point = 3;
	// 值 "1,2,3,.."
	int32 value = 4;
}

// 手牌信息
message HandInfo {
	int32 uid = 1;
	repeated Card cards = 2;
}
