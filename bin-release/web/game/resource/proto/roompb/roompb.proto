syntax = "proto3";

import "errpb/err.proto";

package roompb;

service Room {
	//// 注册 Online
	//rpc Register(RegisterReq) returns (RegisterResp) {}
	//// 注销 Online
	//rpc Unregister(UnregisterReq) returns (UnregisterResp) {}
	//// Keepalive 保活(3秒保活一次, 10秒超时)
	//rpc Keepalive(KeepaliveReq) returns (KeepaliveResp) {}
	// CreateRoom 创建房间
	rpc CreateRoom(CreateRoomReq) returns (CreateRoomResp) {}
	// DismissRoom 解散房间
	rpc DismissRoom(DismissRoomReq) returns (DismissRoomResp) {}
	// EnterRoom 玩家进入房间
	rpc EnterRoom(EnterRoomReq) returns (EnterRoomResp) {}
	// LeaveRoom 玩家离开房间
	rpc LeaveRoom(LeaveRoomReq) returns (LeaveRoomResp) {}
	// 查询uid信息
	rpc GetPlayerInfo(GetPlayerInfoReq) returns (GetPlayerInfoResp) {}
	// 获得房间服务器的负载信息(用于各个online做负载均衡)
	rpc GetLoadInfo(GetLoadInfoReq) returns (GetLoadInfoResp) {}
	// 申请解散房间
	rpc AskDismissRoom(AskDismissRoomReq) returns (AskDismissRoomResp) {}
	// 应答解散房间
	rpc ReplyDismissRoom(ReplyDismissRoomReq) returns (ReplyDismissRoomResp) {}
	// 换座位? 座位空好换, 座位有人要协商?
}

/*
message RegisterReq {
	int32 online_id = 1;
	// true: 如果之前有注册, 就先注销它
	bool force = 2;
}
message RegisterResp {
	errpb.ERR errcode = 1;
	int64 session = 2;
}

message UnregisterReq {
	int64 session = 1;
}
message UnregisterResp {
}

message KeepaliveReq {
	int64 session = 1;
}
message KeepaliveResp {
}
*/

message GetLoadInfoReq {
}
message GetLoadInfoResp {
	int32 player_num = 1;
	int32 room_num = 2;
}

message CreateRoomReq {
	string roomid = 1;
	int32 owner = 2;
}
message CreateRoomResp {
	// 错误码
	errpb.ERR errcode = 1;
}

message EnterRoomReq {
	int32 OnlineId = 1;
	string roomid = 2;
	string notiSubj = 3;
	// true: 观察者(房主不能是观察者, 硬塞会失败)
	bool ob = 4;
	// 加入者玩家信息
	int32 uid = 5;
	string nick = 6;
	bytes icon = 7;
	string ip = 8;
}
message EnterRoomResp {
	// 错误码
	errpb.ERR errcode = 1;
	// 座位情况
	repeated PlayerInfo players = 3;
}

enum LEAVE_REASON {
	// 客户端连接断开(杀APP/断网)
	CLIENT_CONN_BROKEN = 0;
	// 房间解散(这个原因只会由roomsrv发起, online不会传过来)
	ROOM_DISMISS = 1;
	// 玩家在房间开始牌局之前点了离开房间
	PLAYER_WANT = 2;
	// 房间服务器出于逻辑需要不要保留座位
	ROOM_NEED_NORES = 3;
}

message LeaveRoomReq {
	// 离开者id
	int32 uid = 1;
	// 离开的原因
	LEAVE_REASON reason = 2;
}
message LeaveRoomResp {
	// 错误码
	errpb.ERR errcode = 1;
	// 要不要保留玩家的房间
	bool reserve = 2;
}

message DismissRoomReq {
	// 解散者
	int32 uid = 1;
	// 解散的房间号(房间号和uid二选一, uid优先)
	string roomid = 2;
	// 强行关闭
	bool force = 3;
}
message DismissRoomResp {
	// 错误码
	errpb.ERR errcode = 1;
}

message GetPlayerInfoReq {
	repeated int32 uid = 1;
}
message GetPlayerInfoResp {
	// 错误码
	errpb.ERR errcode = 1;
	repeated PlayerInfo player_info = 3;
}

message AskDismissRoomReq {
	int32 uid = 1;
}
message AskDismissRoomResp {
	errpb.ERR errcode = 1;
	// 等待回复的剩余时间, 时间到还没有决议就强行解散房间;
	int32 ask_second = 2;
	int32 wait_seconds = 3;
}

message ReplyDismissRoomReq {
	int32 uid = 1;
	bool agree = 2;
}
message ReplyDismissRoomResp {
	errpb.ERR errcode = 1;
}

// 通知源 或 通知接受者的类型
enum NOTIFIER {
	// 玩家
	PLAYER = 0;
	// 房间
	ROOM = 1;
	// online服务器
	ONLINE = 2;
}
enum NOTIFY {
	NOOP = 0;
	// 房间关闭
	ROOM_CLOSED = 1;
	// 玩家进入房间
	PLAYER_ENTER = 2;
	// 玩家离开房间
	PLAYER_LEAVE = 3;
	// 有人提出解散房间
	ASK_DISMISS_ROOM = 4;
	// 人齐了, 牌局开始
	ROOM_START = 5;
	// 应答解散提议的通知
	REPLY_DISMISS_ROOM = 6;
	// 解散房间失败
	FAIL_DISMISS_ROOM = 7;
}
enum ROOM_CLOSE_REASON {
	// 房间空闲超时(指:没有玩家, 但可能还有ob)
	EMPTY = 0;
	// 被某玩家解散
	DISMISS = 1;
	// room服务器关闭
	ROOMSRV_CLOSE = 2;
}
message Notify {
	// 通知类型, 参考 NOTIFY 的定义
	NOTIFY type = 1;
	// 通知接收者, 具体指:
	// 解散通知: 不包括解散者自己, 包括ob
	// 进入通知: 房间所有人(不包括进入者自己)
	// 离开通知: 房间所有人(不包括退出者自己)
	int32 recver = 3;
	repeated int32 recvers = 4;
	RoomCloseNotify room_close = 5;
	PlayerEnterNotify player_enter = 6;
	PlayerLeaveNotify player_leave = 7;
	AskDismissNotify ask_dismiss = 8;
	RoomStartNotify room_start = 9;
	ReplyDismissNotify reply_dismiss = 10;
	FailDismissNotify fail_dismiss = 11;
}
// NOTIFY_ROOM_CLOSED
message RoomCloseNotify {
	string roomid = 1;
	ROOM_CLOSE_REASON reason = 2;
	int32 dismisser = 3;
}
// NOTIFY_PLAYER_ENTER
message PlayerEnterNotify {
	// 进入者
	PlayerInfo enterer = 1;
}
// NOTIFY_PLAYER_LEAVE
message PlayerLeaveNotify {
	message Leaver {
		int32 uid = 1;
		// true: 保留 uid 的房间座位(显示成离线)
		bool reserve = 2;
		// true: ob, false: player
		bool ob = 3;
		// ob: obid, player: seatid
		int32 idx = 4;
	}
	// 离开者
	Leaver leaver = 1;
}
// NOTIFY_ASK_DISMISS_ROOM
message AskDismissNotify {
	// 发起解散者
	int32 dismisser = 1;
	// 等待解散时间, 超时没决议, 服务器强行解散房间
	int32 ask_second = 2;
	int32 wait_seconds = 3;
}
// NOTIFY_ROOM_START
message RoomStartNotify {
	string roomid = 1;
}
// NOTIFY_REPLY_DISMISS_ROOM
message ReplyDismissNotify {
	// 应答者
	int32 replier = 1;
	// true: 同意解散, false: 不同意
	bool agree = 2;
}
// NOTIFY_FAIL_DISMISS_ROOM
message FailDismissNotify {
	string roomid = 1;
	// 不能解散的原因: 0多数不同意
	int32 reason = 2;
}

message PlayerInfo {
	int32 online_id = 1;
	int32 uid = 2;
	string nick = 3;
	int32 seatid = 5;
	int32 obid = 6;
	bool ob = 7;
	bytes icon = 8;
	string ip = 9;
	bool in_room = 10;
}
